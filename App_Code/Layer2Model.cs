//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class FixupCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
public partial class Exercise
{
    #region Primitive Properties

    public virtual string name
    {
        get;
        set;
    }

    public virtual string equipment
    {
        get;
        set;
    }

    public virtual string videoLink
    {
        get;
        set;
    }

    public virtual bool rep
    {
        get;
        set;
    }

    public virtual bool weight
    {
        get;
        set;
    }

    public virtual bool distance
    {
        get;
        set;
    }

    public virtual bool time
    {
        get;
        set;
    }

    public virtual bool enabled
    {
        get;
        set;
    }

    public virtual int id
    {
        get;
        set;
    }

    public virtual string muscleGroups
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ICollection<ScheduledExercise> ScheduledExercises
    {
        get
        {
            if (_scheduledExercises == null)
            {
                var newCollection = new FixupCollection<ScheduledExercise>();
                newCollection.CollectionChanged += FixupScheduledExercises;
                _scheduledExercises = newCollection;
            }
            return _scheduledExercises;
        }
        set
        {
            if (!ReferenceEquals(_scheduledExercises, value))
            {
                var previousValue = _scheduledExercises as FixupCollection<ScheduledExercise>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupScheduledExercises;
                }
                _scheduledExercises = value;
                var newValue = value as FixupCollection<ScheduledExercise>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupScheduledExercises;
                }
            }
        }
    }
    private ICollection<ScheduledExercise> _scheduledExercises;

    public virtual ICollection<LoggedExercise> LoggedExercise
    {
        get
        {
            if (_loggedExercise == null)
            {
                var newCollection = new FixupCollection<LoggedExercise>();
                newCollection.CollectionChanged += FixupLoggedExercise;
                _loggedExercise = newCollection;
            }
            return _loggedExercise;
        }
        set
        {
            if (!ReferenceEquals(_loggedExercise, value))
            {
                var previousValue = _loggedExercise as FixupCollection<LoggedExercise>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLoggedExercise;
                }
                _loggedExercise = value;
                var newValue = value as FixupCollection<LoggedExercise>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLoggedExercise;
                }
            }
        }
    }
    private ICollection<LoggedExercise> _loggedExercise;

    public virtual ExerciseExp ExerciseExp
    {
        get { return _exerciseExp; }
        set
        {
            if (!ReferenceEquals(_exerciseExp, value))
            {
                var previousValue = _exerciseExp;
                _exerciseExp = value;
                FixupExerciseExp(previousValue);
            }
        }
    }
    private ExerciseExp _exerciseExp;

    public virtual ExerciseGoal ExerciseGoal
    {
        get { return _exerciseGoal; }
        set
        {
            if (!ReferenceEquals(_exerciseGoal, value))
            {
                var previousValue = _exerciseGoal;
                _exerciseGoal = value;
                FixupExerciseGoal(previousValue);
            }
        }
    }
    private ExerciseGoal _exerciseGoal;

    public virtual ICollection<Routine> Routines
    {
        get
        {
            if (_routines == null)
            {
                var newCollection = new FixupCollection<Routine>();
                newCollection.CollectionChanged += FixupRoutines;
                _routines = newCollection;
            }
            return _routines;
        }
        set
        {
            if (!ReferenceEquals(_routines, value))
            {
                var previousValue = _routines as FixupCollection<Routine>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupRoutines;
                }
                _routines = value;
                var newValue = value as FixupCollection<Routine>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupRoutines;
                }
            }
        }
    }
    private ICollection<Routine> _routines;

    #endregion
    #region Association Fixup

    private void FixupExerciseExp(ExerciseExp previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.Exercise, this))
        {
            previousValue.Exercise = null;
        }

        if (ExerciseExp != null)
        {
            ExerciseExp.Exercise = this;
        }
    }

    private void FixupExerciseGoal(ExerciseGoal previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.Exercise, this))
        {
            previousValue.Exercise = null;
        }

        if (ExerciseGoal != null)
        {
            ExerciseGoal.Exercise = this;
        }
    }

    private void FixupScheduledExercises(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ScheduledExercise item in e.NewItems)
            {
                item.ExerciseBase = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ScheduledExercise item in e.OldItems)
            {
                if (ReferenceEquals(item.ExerciseBase, this))
                {
                    item.ExerciseBase = null;
                }
            }
        }
    }

    private void FixupLoggedExercise(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LoggedExercise item in e.NewItems)
            {
                item.ExerciseBase = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (LoggedExercise item in e.OldItems)
            {
                if (ReferenceEquals(item.ExerciseBase, this))
                {
                    item.ExerciseBase = null;
                }
            }
        }
    }

    private void FixupRoutines(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Routine item in e.NewItems)
            {
                item.Exercise = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Routine item in e.OldItems)
            {
                if (ReferenceEquals(item.Exercise, this))
                {
                    item.Exercise = null;
                }
            }
        }
    }

    #endregion
}
public partial class ExerciseExp
{
    #region Primitive Properties

    public virtual double baseExperience
    {
        get;
        set;
    }

    public virtual double weightModifier
    {
        get;
        set;
    }

    public virtual double repModifier
    {
        get;
        set;
    }

    public virtual double distanceModifier
    {
        get;
        set;
    }

    public virtual double timeModifier
    {
        get;
        set;
    }

    public virtual int id
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Exercise Exercise
    {
        get { return _exercise; }
        set
        {
            if (!ReferenceEquals(_exercise, value))
            {
                var previousValue = _exercise;
                _exercise = value;
                FixupExercise(previousValue);
            }
        }
    }
    private Exercise _exercise;

    #endregion
    #region Association Fixup

    private void FixupExercise(Exercise previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.ExerciseExp, this))
        {
            previousValue.ExerciseExp = null;
        }

        if (Exercise != null)
        {
            Exercise.ExerciseExp = this;
        }
    }

    #endregion
}
public partial class ExerciseGoal
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual int weight
    {
        get;
        set;
    }

    public virtual double distance
    {
        get;
        set;
    }

    public virtual int time
    {
        get;
        set;
    }

    public virtual int reps
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    public virtual Exercise Exercise
    {
        get { return _exercise; }
        set
        {
            if (!ReferenceEquals(_exercise, value))
            {
                var previousValue = _exercise;
                _exercise = value;
                FixupExercise(previousValue);
            }
        }
    }
    private Exercise _exercise;

    #endregion
    #region Association Fixup

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.ExerciseGoals.Contains(this))
        {
            previousValue.ExerciseGoals.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.ExerciseGoals.Contains(this))
            {
                LimitBreaker.ExerciseGoals.Add(this);
            }
        }
    }

    private void FixupExercise(Exercise previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.ExerciseGoal, this))
        {
            previousValue.ExerciseGoal = null;
        }

        if (Exercise != null)
        {
            Exercise.ExerciseGoal = this;
        }
    }

    #endregion
}
public partial class ExperienceAtrophy
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual int graceDays
    {
        get;
        set;
    }

    public virtual double baseLoss
    {
        get;
        set;
    }

    #endregion
}
public partial class LevelFormula
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual int maxLevel
    {
        get;
        set;
    }

    public virtual double expModifier
    {
        get;
        set;
    }

    public virtual double baseRequired
    {
        get;
        set;
    }

    #endregion
}
public partial class LimitBreaker
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual string username
    {
        get;
        set;
    }

    public virtual string gender
    {
        get;
        set;
    }

    public virtual System.DateTime dateOfBirth
    {
        get;
        set;
    }

    public virtual bool verified
    {
        get;
        set;
    }

    public virtual bool deactivated
    {
        get;
        set;
    }

    public virtual string email
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ICollection<ScheduledExercise> ScheduledExercise
    {
        get
        {
            if (_scheduledExercise == null)
            {
                var newCollection = new FixupCollection<ScheduledExercise>();
                newCollection.CollectionChanged += FixupScheduledExercise;
                _scheduledExercise = newCollection;
            }
            return _scheduledExercise;
        }
        set
        {
            if (!ReferenceEquals(_scheduledExercise, value))
            {
                var previousValue = _scheduledExercise as FixupCollection<ScheduledExercise>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupScheduledExercise;
                }
                _scheduledExercise = value;
                var newValue = value as FixupCollection<ScheduledExercise>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupScheduledExercise;
                }
            }
        }
    }
    private ICollection<ScheduledExercise> _scheduledExercise;

    public virtual Statistics Statistics
    {
        get { return _statistics; }
        set
        {
            if (!ReferenceEquals(_statistics, value))
            {
                var previousValue = _statistics;
                _statistics = value;
                FixupStatistics(previousValue);
            }
        }
    }
    private Statistics _statistics;

    public virtual ICollection<Routine> Routines
    {
        get
        {
            if (_routines == null)
            {
                var newCollection = new FixupCollection<Routine>();
                newCollection.CollectionChanged += FixupRoutines;
                _routines = newCollection;
            }
            return _routines;
        }
        set
        {
            if (!ReferenceEquals(_routines, value))
            {
                var previousValue = _routines as FixupCollection<Routine>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupRoutines;
                }
                _routines = value;
                var newValue = value as FixupCollection<Routine>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupRoutines;
                }
            }
        }
    }
    private ICollection<Routine> _routines;

    public virtual ICollection<ScheduledRoutine> ScheduledRoutines
    {
        get
        {
            if (_scheduledRoutines == null)
            {
                var newCollection = new FixupCollection<ScheduledRoutine>();
                newCollection.CollectionChanged += FixupScheduledRoutines;
                _scheduledRoutines = newCollection;
            }
            return _scheduledRoutines;
        }
        set
        {
            if (!ReferenceEquals(_scheduledRoutines, value))
            {
                var previousValue = _scheduledRoutines as FixupCollection<ScheduledRoutine>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupScheduledRoutines;
                }
                _scheduledRoutines = value;
                var newValue = value as FixupCollection<ScheduledRoutine>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupScheduledRoutines;
                }
            }
        }
    }
    private ICollection<ScheduledRoutine> _scheduledRoutines;

    public virtual ICollection<LoggedExercise> LoggedExercises
    {
        get
        {
            if (_loggedExercises == null)
            {
                var newCollection = new FixupCollection<LoggedExercise>();
                newCollection.CollectionChanged += FixupLoggedExercises;
                _loggedExercises = newCollection;
            }
            return _loggedExercises;
        }
        set
        {
            if (!ReferenceEquals(_loggedExercises, value))
            {
                var previousValue = _loggedExercises as FixupCollection<LoggedExercise>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLoggedExercises;
                }
                _loggedExercises = value;
                var newValue = value as FixupCollection<LoggedExercise>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLoggedExercises;
                }
            }
        }
    }
    private ICollection<LoggedExercise> _loggedExercises;

    public virtual ICollection<Notification> Notifications
    {
        get
        {
            if (_notifications == null)
            {
                var newCollection = new FixupCollection<Notification>();
                newCollection.CollectionChanged += FixupNotifications;
                _notifications = newCollection;
            }
            return _notifications;
        }
        set
        {
            if (!ReferenceEquals(_notifications, value))
            {
                var previousValue = _notifications as FixupCollection<Notification>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupNotifications;
                }
                _notifications = value;
                var newValue = value as FixupCollection<Notification>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupNotifications;
                }
            }
        }
    }
    private ICollection<Notification> _notifications;

    public virtual ICollection<ExerciseGoal> ExerciseGoals
    {
        get
        {
            if (_exerciseGoals == null)
            {
                var newCollection = new FixupCollection<ExerciseGoal>();
                newCollection.CollectionChanged += FixupExerciseGoals;
                _exerciseGoals = newCollection;
            }
            return _exerciseGoals;
        }
        set
        {
            if (!ReferenceEquals(_exerciseGoals, value))
            {
                var previousValue = _exerciseGoals as FixupCollection<ExerciseGoal>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupExerciseGoals;
                }
                _exerciseGoals = value;
                var newValue = value as FixupCollection<ExerciseGoal>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupExerciseGoals;
                }
            }
        }
    }
    private ICollection<ExerciseGoal> _exerciseGoals;

    #endregion
    #region Association Fixup

    private void FixupStatistics(Statistics previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.LimitBreaker, this))
        {
            previousValue.LimitBreaker = null;
        }

        if (Statistics != null)
        {
            Statistics.LimitBreaker = this;
        }
    }

    private void FixupScheduledExercise(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ScheduledExercise item in e.NewItems)
            {
                item.LimitBreakers = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ScheduledExercise item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreakers, this))
                {
                    item.LimitBreakers = null;
                }
            }
        }
    }

    private void FixupRoutines(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Routine item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Routine item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    private void FixupScheduledRoutines(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ScheduledRoutine item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ScheduledRoutine item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    private void FixupLoggedExercises(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LoggedExercise item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (LoggedExercise item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    private void FixupNotifications(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Notification item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Notification item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    private void FixupExerciseGoals(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ExerciseGoal item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ExerciseGoal item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    #endregion
}
public partial class LoggedExercise
{
    #region Primitive Properties

    public virtual int sets
    {
        get;
        set;
    }

    public virtual System.DateTime timeLogged
    {
        get;
        set;
    }

    public virtual string note
    {
        get;
        set;
    }

    public virtual long id
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ICollection<SetAttributes> SetAttributes
    {
        get
        {
            if (_setAttributes == null)
            {
                var newCollection = new FixupCollection<SetAttributes>();
                newCollection.CollectionChanged += FixupSetAttributes;
                _setAttributes = newCollection;
            }
            return _setAttributes;
        }
        set
        {
            if (!ReferenceEquals(_setAttributes, value))
            {
                var previousValue = _setAttributes as FixupCollection<SetAttributes>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupSetAttributes;
                }
                _setAttributes = value;
                var newValue = value as FixupCollection<SetAttributes>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupSetAttributes;
                }
            }
        }
    }
    private ICollection<SetAttributes> _setAttributes;

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    public virtual Exercise ExerciseBase
    {
        get { return _exerciseBase; }
        set
        {
            if (!ReferenceEquals(_exerciseBase, value))
            {
                var previousValue = _exerciseBase;
                _exerciseBase = value;
                FixupExerciseBase(previousValue);
            }
        }
    }
    private Exercise _exerciseBase;

    #endregion
    #region Association Fixup

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.LoggedExercises.Contains(this))
        {
            previousValue.LoggedExercises.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.LoggedExercises.Contains(this))
            {
                LimitBreaker.LoggedExercises.Add(this);
            }
        }
    }

    private void FixupExerciseBase(Exercise previousValue)
    {
        if (previousValue != null && previousValue.LoggedExercise.Contains(this))
        {
            previousValue.LoggedExercise.Remove(this);
        }

        if (ExerciseBase != null)
        {
            if (!ExerciseBase.LoggedExercise.Contains(this))
            {
                ExerciseBase.LoggedExercise.Add(this);
            }
        }
    }

    private void FixupSetAttributes(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (SetAttributes item in e.NewItems)
            {
                item.LoggedExercise = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (SetAttributes item in e.OldItems)
            {
                if (ReferenceEquals(item.LoggedExercise, this))
                {
                    item.LoggedExercise = null;
                }
            }
        }
    }

    #endregion
}
public partial class Notification
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual System.DateTime dateCreated
    {
        get;
        set;
    }

    public virtual System.DateTime dateToBeSent
    {
        get;
        set;
    }

    public virtual string message
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    #endregion
    #region Association Fixup

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.Notifications.Contains(this))
        {
            previousValue.Notifications.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.Notifications.Contains(this))
            {
                LimitBreaker.Notifications.Add(this);
            }
        }
    }

    #endregion
}
public partial class Routine
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual System.DateTime last_modified
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ICollection<ScheduledRoutine> ScheduledRoutines
    {
        get
        {
            if (_scheduledRoutines == null)
            {
                var newCollection = new FixupCollection<ScheduledRoutine>();
                newCollection.CollectionChanged += FixupScheduledRoutines;
                _scheduledRoutines = newCollection;
            }
            return _scheduledRoutines;
        }
        set
        {
            if (!ReferenceEquals(_scheduledRoutines, value))
            {
                var previousValue = _scheduledRoutines as FixupCollection<ScheduledRoutine>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupScheduledRoutines;
                }
                _scheduledRoutines = value;
                var newValue = value as FixupCollection<ScheduledRoutine>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupScheduledRoutines;
                }
            }
        }
    }
    private ICollection<ScheduledRoutine> _scheduledRoutines;

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    public virtual Exercise Exercise
    {
        get { return _exercise; }
        set
        {
            if (!ReferenceEquals(_exercise, value))
            {
                var previousValue = _exercise;
                _exercise = value;
                FixupExercise(previousValue);
            }
        }
    }
    private Exercise _exercise;

    #endregion
    #region Association Fixup

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.Routines.Contains(this))
        {
            previousValue.Routines.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.Routines.Contains(this))
            {
                LimitBreaker.Routines.Add(this);
            }
        }
    }

    private void FixupExercise(Exercise previousValue)
    {
        if (previousValue != null && previousValue.Routines.Contains(this))
        {
            previousValue.Routines.Remove(this);
        }

        if (Exercise != null)
        {
            if (!Exercise.Routines.Contains(this))
            {
                Exercise.Routines.Add(this);
            }
        }
    }

    private void FixupScheduledRoutines(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ScheduledRoutine item in e.NewItems)
            {
                item.Routine = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ScheduledRoutine item in e.OldItems)
            {
                if (ReferenceEquals(item.Routine, this))
                {
                    item.Routine = null;
                }
            }
        }
    }

    #endregion
}
public partial class ScheduledExercise
{
    #region Primitive Properties

    public virtual System.DateTime startTime
    {
        get;
        set;
    }

    public virtual bool NeedEmailNotification
    {
        get;
        set;
    }

    public virtual int id
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Exercise ExerciseBase
    {
        get { return _exerciseBase; }
        set
        {
            if (!ReferenceEquals(_exerciseBase, value))
            {
                var previousValue = _exerciseBase;
                _exerciseBase = value;
                FixupExerciseBase(previousValue);
            }
        }
    }
    private Exercise _exerciseBase;

    public virtual LimitBreaker LimitBreakers
    {
        get { return _limitBreakers; }
        set
        {
            if (!ReferenceEquals(_limitBreakers, value))
            {
                var previousValue = _limitBreakers;
                _limitBreakers = value;
                FixupLimitBreakers(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreakers;

    #endregion
    #region Association Fixup

    private void FixupExerciseBase(Exercise previousValue)
    {
        if (previousValue != null && previousValue.ScheduledExercises.Contains(this))
        {
            previousValue.ScheduledExercises.Remove(this);
        }

        if (ExerciseBase != null)
        {
            if (!ExerciseBase.ScheduledExercises.Contains(this))
            {
                ExerciseBase.ScheduledExercises.Add(this);
            }
        }
    }

    private void FixupLimitBreakers(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.ScheduledExercise.Contains(this))
        {
            previousValue.ScheduledExercise.Remove(this);
        }

        if (LimitBreakers != null)
        {
            if (!LimitBreakers.ScheduledExercise.Contains(this))
            {
                LimitBreakers.ScheduledExercise.Add(this);
            }
        }
    }

    #endregion
}
public partial class ScheduledRoutine
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual bool NeedEmailNotification
    {
        get;
        set;
    }

    public virtual System.DateTime startTime
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Routine Routine
    {
        get { return _routine; }
        set
        {
            if (!ReferenceEquals(_routine, value))
            {
                var previousValue = _routine;
                _routine = value;
                FixupRoutine(previousValue);
            }
        }
    }
    private Routine _routine;

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    #endregion
    #region Association Fixup

    private void FixupRoutine(Routine previousValue)
    {
        if (previousValue != null && previousValue.ScheduledRoutines.Contains(this))
        {
            previousValue.ScheduledRoutines.Remove(this);
        }

        if (Routine != null)
        {
            if (!Routine.ScheduledRoutines.Contains(this))
            {
                Routine.ScheduledRoutines.Add(this);
            }
        }
    }

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.ScheduledRoutines.Contains(this))
        {
            previousValue.ScheduledRoutines.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.ScheduledRoutines.Contains(this))
            {
                LimitBreaker.ScheduledRoutines.Add(this);
            }
        }
    }

    #endregion
}
public partial class SetAttributes
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual Nullable<int> weight
    {
        get;
        set;
    }

    public virtual Nullable<double> distance
    {
        get;
        set;
    }

    public virtual Nullable<int> time
    {
        get;
        set;
    }

    public virtual Nullable<int> reps
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual LoggedExercise LoggedExercise
    {
        get { return _loggedExercise; }
        set
        {
            if (!ReferenceEquals(_loggedExercise, value))
            {
                var previousValue = _loggedExercise;
                _loggedExercise = value;
                FixupLoggedExercise(previousValue);
            }
        }
    }
    private LoggedExercise _loggedExercise;

    #endregion
    #region Association Fixup

    private void FixupLoggedExercise(LoggedExercise previousValue)
    {
        if (previousValue != null && previousValue.SetAttributes.Contains(this))
        {
            previousValue.SetAttributes.Remove(this);
        }

        if (LoggedExercise != null)
        {
            if (!LoggedExercise.SetAttributes.Contains(this))
            {
                LoggedExercise.SetAttributes.Add(this);
            }
        }
    }

    #endregion
}
public partial class Statistics
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual int level
    {
        get;
        set;
    }

    public virtual double experience
    {
        get;
        set;
    }

    public virtual double weight
    {
        get;
        set;
    }

    public virtual double height
    {
        get;
        set;
    }

    public virtual double rmr
    {
        get;
        set;
    }

    public virtual double bmi
    {
        get;
        set;
    }

    public virtual double vo2MAX
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    #endregion
    #region Association Fixup

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.Statistics, this))
        {
            previousValue.Statistics = null;
        }

        if (LimitBreaker != null)
        {
            LimitBreaker.Statistics = this;
        }
    }

    #endregion
}
