//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class FixupCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
public partial class Exercise
{
    #region Primitive Properties

    public virtual string name
    {
        get;
        set;
    }

    public virtual string equipment
    {
        get;
        set;
    }

    public virtual string videoLink
    {
        get;
        set;
    }

    public virtual bool rep
    {
        get;
        set;
    }

    public virtual bool weight
    {
        get;
        set;
    }

    public virtual bool distance
    {
        get;
        set;
    }

    public virtual bool time
    {
        get;
        set;
    }

    public virtual bool enabled
    {
        get;
        set;
    }

    public virtual int id
    {
        get;
        set;
    }

    public virtual string muscleGroups
    {
        get;
        set;
    }

    public virtual Nullable<int> Routines_id
    {
        get { return _routines_id; }
        set
        {
            try
            {
                _settingFK = true;
                if (_routines_id != value)
                {
                    if (Routine != null && Routine.id != value)
                    {
                        Routine = null;
                    }
                    _routines_id = value;
                }
            }
            finally
            {
                _settingFK = false;
            }
        }
    }
    private Nullable<int> _routines_id;

    #endregion
    #region Navigation Properties

    public virtual ICollection<ExerciseExp> ExerciseExps
    {
        get
        {
            if (_exerciseExps == null)
            {
                var newCollection = new FixupCollection<ExerciseExp>();
                newCollection.CollectionChanged += FixupExerciseExps;
                _exerciseExps = newCollection;
            }
            return _exerciseExps;
        }
        set
        {
            if (!ReferenceEquals(_exerciseExps, value))
            {
                var previousValue = _exerciseExps as FixupCollection<ExerciseExp>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupExerciseExps;
                }
                _exerciseExps = value;
                var newValue = value as FixupCollection<ExerciseExp>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupExerciseExps;
                }
            }
        }
    }
    private ICollection<ExerciseExp> _exerciseExps;

    public virtual ICollection<ExerciseGoal> ExerciseGoals
    {
        get
        {
            if (_exerciseGoals == null)
            {
                var newCollection = new FixupCollection<ExerciseGoal>();
                newCollection.CollectionChanged += FixupExerciseGoals;
                _exerciseGoals = newCollection;
            }
            return _exerciseGoals;
        }
        set
        {
            if (!ReferenceEquals(_exerciseGoals, value))
            {
                var previousValue = _exerciseGoals as FixupCollection<ExerciseGoal>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupExerciseGoals;
                }
                _exerciseGoals = value;
                var newValue = value as FixupCollection<ExerciseGoal>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupExerciseGoals;
                }
            }
        }
    }
    private ICollection<ExerciseGoal> _exerciseGoals;

    public virtual Routine Routine
    {
        get { return _routine; }
        set
        {
            if (!ReferenceEquals(_routine, value))
            {
                var previousValue = _routine;
                _routine = value;
                FixupRoutine(previousValue);
            }
        }
    }
    private Routine _routine;

    public virtual ICollection<ScheduledExercis> ScheduledExercises
    {
        get
        {
            if (_scheduledExercises == null)
            {
                var newCollection = new FixupCollection<ScheduledExercis>();
                newCollection.CollectionChanged += FixupScheduledExercises;
                _scheduledExercises = newCollection;
            }
            return _scheduledExercises;
        }
        set
        {
            if (!ReferenceEquals(_scheduledExercises, value))
            {
                var previousValue = _scheduledExercises as FixupCollection<ScheduledExercis>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupScheduledExercises;
                }
                _scheduledExercises = value;
                var newValue = value as FixupCollection<ScheduledExercis>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupScheduledExercises;
                }
            }
        }
    }
    private ICollection<ScheduledExercis> _scheduledExercises;

    public virtual ICollection<LoggedExercis> LoggedExercises
    {
        get
        {
            if (_loggedExercises == null)
            {
                var newCollection = new FixupCollection<LoggedExercis>();
                newCollection.CollectionChanged += FixupLoggedExercises;
                _loggedExercises = newCollection;
            }
            return _loggedExercises;
        }
        set
        {
            if (!ReferenceEquals(_loggedExercises, value))
            {
                var previousValue = _loggedExercises as FixupCollection<LoggedExercis>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLoggedExercises;
                }
                _loggedExercises = value;
                var newValue = value as FixupCollection<LoggedExercis>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLoggedExercises;
                }
            }
        }
    }
    private ICollection<LoggedExercis> _loggedExercises;

    #endregion
    #region Association Fixup

    private bool _settingFK = false;

    private void FixupRoutine(Routine previousValue)
    {
        if (previousValue != null && previousValue.Exercises.Contains(this))
        {
            previousValue.Exercises.Remove(this);
        }

        if (Routine != null)
        {
            if (!Routine.Exercises.Contains(this))
            {
                Routine.Exercises.Add(this);
            }
            if (Routines_id != Routine.id)
            {
                Routines_id = Routine.id;
            }
        }
        else if (!_settingFK)
        {
            Routines_id = null;
        }
    }

    private void FixupExerciseExps(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ExerciseExp item in e.NewItems)
            {
                item.Exercise = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ExerciseExp item in e.OldItems)
            {
                if (ReferenceEquals(item.Exercise, this))
                {
                    item.Exercise = null;
                }
            }
        }
    }

    private void FixupExerciseGoals(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ExerciseGoal item in e.NewItems)
            {
                item.Exercise = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ExerciseGoal item in e.OldItems)
            {
                if (ReferenceEquals(item.Exercise, this))
                {
                    item.Exercise = null;
                }
            }
        }
    }

    private void FixupScheduledExercises(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ScheduledExercis item in e.NewItems)
            {
                item.Exercise = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ScheduledExercis item in e.OldItems)
            {
                if (ReferenceEquals(item.Exercise, this))
                {
                    item.Exercise = null;
                }
            }
        }
    }

    private void FixupLoggedExercises(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LoggedExercis item in e.NewItems)
            {
                item.Exercise = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (LoggedExercis item in e.OldItems)
            {
                if (ReferenceEquals(item.Exercise, this))
                {
                    item.Exercise = null;
                }
            }
        }
    }

    #endregion
}
public partial class ExerciseExp
{
    #region Primitive Properties

    public virtual double baseExperience
    {
        get;
        set;
    }

    public virtual double weightModifier
    {
        get;
        set;
    }

    public virtual double repModifier
    {
        get;
        set;
    }

    public virtual double distanceModifier
    {
        get;
        set;
    }

    public virtual double timeModifier
    {
        get;
        set;
    }

    public virtual int id
    {
        get;
        set;
    }

    public virtual int Exercise_id
    {
        get { return _exercise_id; }
        set
        {
            if (_exercise_id != value)
            {
                if (Exercise != null && Exercise.id != value)
                {
                    Exercise = null;
                }
                _exercise_id = value;
            }
        }
    }
    private int _exercise_id;

    #endregion
    #region Navigation Properties

    public virtual Exercise Exercise
    {
        get { return _exercise; }
        set
        {
            if (!ReferenceEquals(_exercise, value))
            {
                var previousValue = _exercise;
                _exercise = value;
                FixupExercise(previousValue);
            }
        }
    }
    private Exercise _exercise;

    #endregion
    #region Association Fixup

    private void FixupExercise(Exercise previousValue)
    {
        if (previousValue != null && previousValue.ExerciseExps.Contains(this))
        {
            previousValue.ExerciseExps.Remove(this);
        }

        if (Exercise != null)
        {
            if (!Exercise.ExerciseExps.Contains(this))
            {
                Exercise.ExerciseExps.Add(this);
            }
            if (Exercise_id != Exercise.id)
            {
                Exercise_id = Exercise.id;
            }
        }
    }

    #endregion
}
public partial class ExerciseGoal
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual int weight
    {
        get;
        set;
    }

    public virtual double distance
    {
        get;
        set;
    }

    public virtual int time
    {
        get;
        set;
    }

    public virtual int reps
    {
        get;
        set;
    }

    public virtual int LimitBreaker_id
    {
        get { return _limitBreaker_id; }
        set
        {
            if (_limitBreaker_id != value)
            {
                if (LimitBreaker != null && LimitBreaker.id != value)
                {
                    LimitBreaker = null;
                }
                _limitBreaker_id = value;
            }
        }
    }
    private int _limitBreaker_id;

    public virtual int Exercise_id
    {
        get { return _exercise_id; }
        set
        {
            if (_exercise_id != value)
            {
                if (Exercise != null && Exercise.id != value)
                {
                    Exercise = null;
                }
                _exercise_id = value;
            }
        }
    }
    private int _exercise_id;

    #endregion
    #region Navigation Properties

    public virtual Exercise Exercise
    {
        get { return _exercise; }
        set
        {
            if (!ReferenceEquals(_exercise, value))
            {
                var previousValue = _exercise;
                _exercise = value;
                FixupExercise(previousValue);
            }
        }
    }
    private Exercise _exercise;

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    #endregion
    #region Association Fixup

    private void FixupExercise(Exercise previousValue)
    {
        if (previousValue != null && previousValue.ExerciseGoals.Contains(this))
        {
            previousValue.ExerciseGoals.Remove(this);
        }

        if (Exercise != null)
        {
            if (!Exercise.ExerciseGoals.Contains(this))
            {
                Exercise.ExerciseGoals.Add(this);
            }
            if (Exercise_id != Exercise.id)
            {
                Exercise_id = Exercise.id;
            }
        }
    }

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.ExerciseGoals.Contains(this))
        {
            previousValue.ExerciseGoals.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.ExerciseGoals.Contains(this))
            {
                LimitBreaker.ExerciseGoals.Add(this);
            }
            if (LimitBreaker_id != LimitBreaker.id)
            {
                LimitBreaker_id = LimitBreaker.id;
            }
        }
    }

    #endregion
}
public partial class ExperienceAtrophy
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual int graceDays
    {
        get;
        set;
    }

    public virtual double baseLoss
    {
        get;
        set;
    }

    #endregion
}
public partial class LevelFormula
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual int maxLevel
    {
        get;
        set;
    }

    public virtual double expModifier
    {
        get;
        set;
    }

    public virtual double baseRequired
    {
        get;
        set;
    }

    #endregion
}
public partial class LimitBreaker
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual string username
    {
        get;
        set;
    }

    public virtual string gender
    {
        get;
        set;
    }

    public virtual System.DateTime dateOfBirth
    {
        get;
        set;
    }

    public virtual bool verified
    {
        get;
        set;
    }

    public virtual bool deactivated
    {
        get;
        set;
    }

    public virtual string email
    {
        get;
        set;
    }

    public virtual int Statistics_id
    {
        get { return _statistics_id; }
        set
        {
            if (_statistics_id != value)
            {
                if (Statistic != null && Statistic.id != value)
                {
                    Statistic = null;
                }
                _statistics_id = value;
            }
        }
    }
    private int _statistics_id;

    #endregion
    #region Navigation Properties

    public virtual ICollection<ExerciseGoal> ExerciseGoals
    {
        get
        {
            if (_exerciseGoals == null)
            {
                var newCollection = new FixupCollection<ExerciseGoal>();
                newCollection.CollectionChanged += FixupExerciseGoals;
                _exerciseGoals = newCollection;
            }
            return _exerciseGoals;
        }
        set
        {
            if (!ReferenceEquals(_exerciseGoals, value))
            {
                var previousValue = _exerciseGoals as FixupCollection<ExerciseGoal>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupExerciseGoals;
                }
                _exerciseGoals = value;
                var newValue = value as FixupCollection<ExerciseGoal>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupExerciseGoals;
                }
            }
        }
    }
    private ICollection<ExerciseGoal> _exerciseGoals;

    public virtual ICollection<LoggedExercis> LoggedExercises
    {
        get
        {
            if (_loggedExercises == null)
            {
                var newCollection = new FixupCollection<LoggedExercis>();
                newCollection.CollectionChanged += FixupLoggedExercises;
                _loggedExercises = newCollection;
            }
            return _loggedExercises;
        }
        set
        {
            if (!ReferenceEquals(_loggedExercises, value))
            {
                var previousValue = _loggedExercises as FixupCollection<LoggedExercis>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLoggedExercises;
                }
                _loggedExercises = value;
                var newValue = value as FixupCollection<LoggedExercis>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLoggedExercises;
                }
            }
        }
    }
    private ICollection<LoggedExercis> _loggedExercises;

    public virtual ICollection<Routine> Routines
    {
        get
        {
            if (_routines == null)
            {
                var newCollection = new FixupCollection<Routine>();
                newCollection.CollectionChanged += FixupRoutines;
                _routines = newCollection;
            }
            return _routines;
        }
        set
        {
            if (!ReferenceEquals(_routines, value))
            {
                var previousValue = _routines as FixupCollection<Routine>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupRoutines;
                }
                _routines = value;
                var newValue = value as FixupCollection<Routine>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupRoutines;
                }
            }
        }
    }
    private ICollection<Routine> _routines;

    public virtual ICollection<ScheduledRoutine> ScheduledRoutines
    {
        get
        {
            if (_scheduledRoutines == null)
            {
                var newCollection = new FixupCollection<ScheduledRoutine>();
                newCollection.CollectionChanged += FixupScheduledRoutines;
                _scheduledRoutines = newCollection;
            }
            return _scheduledRoutines;
        }
        set
        {
            if (!ReferenceEquals(_scheduledRoutines, value))
            {
                var previousValue = _scheduledRoutines as FixupCollection<ScheduledRoutine>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupScheduledRoutines;
                }
                _scheduledRoutines = value;
                var newValue = value as FixupCollection<ScheduledRoutine>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupScheduledRoutines;
                }
            }
        }
    }
    private ICollection<ScheduledRoutine> _scheduledRoutines;

    public virtual Statistic Statistic
    {
        get { return _statistic; }
        set
        {
            if (!ReferenceEquals(_statistic, value))
            {
                var previousValue = _statistic;
                _statistic = value;
                FixupStatistic(previousValue);
            }
        }
    }
    private Statistic _statistic;

    public virtual ICollection<Notification> Notifications
    {
        get
        {
            if (_notifications == null)
            {
                var newCollection = new FixupCollection<Notification>();
                newCollection.CollectionChanged += FixupNotifications;
                _notifications = newCollection;
            }
            return _notifications;
        }
        set
        {
            if (!ReferenceEquals(_notifications, value))
            {
                var previousValue = _notifications as FixupCollection<Notification>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupNotifications;
                }
                _notifications = value;
                var newValue = value as FixupCollection<Notification>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupNotifications;
                }
            }
        }
    }
    private ICollection<Notification> _notifications;

    public virtual ICollection<ScheduledExercis> ScheduledExercises
    {
        get
        {
            if (_scheduledExercises == null)
            {
                var newCollection = new FixupCollection<ScheduledExercis>();
                newCollection.CollectionChanged += FixupScheduledExercises;
                _scheduledExercises = newCollection;
            }
            return _scheduledExercises;
        }
        set
        {
            if (!ReferenceEquals(_scheduledExercises, value))
            {
                var previousValue = _scheduledExercises as FixupCollection<ScheduledExercis>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupScheduledExercises;
                }
                _scheduledExercises = value;
                var newValue = value as FixupCollection<ScheduledExercis>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupScheduledExercises;
                }
            }
        }
    }
    private ICollection<ScheduledExercis> _scheduledExercises;

    #endregion
    #region Association Fixup

    private void FixupStatistic(Statistic previousValue)
    {
        if (previousValue != null && previousValue.LimitBreakers.Contains(this))
        {
            previousValue.LimitBreakers.Remove(this);
        }

        if (Statistic != null)
        {
            if (!Statistic.LimitBreakers.Contains(this))
            {
                Statistic.LimitBreakers.Add(this);
            }
            if (Statistics_id != Statistic.id)
            {
                Statistics_id = Statistic.id;
            }
        }
    }

    private void FixupExerciseGoals(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ExerciseGoal item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ExerciseGoal item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    private void FixupLoggedExercises(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LoggedExercis item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (LoggedExercis item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    private void FixupRoutines(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Routine item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Routine item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    private void FixupScheduledRoutines(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ScheduledRoutine item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ScheduledRoutine item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    private void FixupNotifications(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Notification item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Notification item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    private void FixupScheduledExercises(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ScheduledExercis item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ScheduledExercis item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    #endregion
}
public partial class LoggedExercis
{
    #region Primitive Properties

    public virtual int sets
    {
        get;
        set;
    }

    public virtual System.DateTime timeLogged
    {
        get;
        set;
    }

    public virtual string note
    {
        get;
        set;
    }

    public virtual long id
    {
        get;
        set;
    }

    public virtual int LimitBreaker_id
    {
        get { return _limitBreaker_id; }
        set
        {
            if (_limitBreaker_id != value)
            {
                if (LimitBreaker != null && LimitBreaker.id != value)
                {
                    LimitBreaker = null;
                }
                _limitBreaker_id = value;
            }
        }
    }
    private int _limitBreaker_id;

    public virtual int ExerciseBase_id
    {
        get { return _exerciseBase_id; }
        set
        {
            if (_exerciseBase_id != value)
            {
                if (Exercise != null && Exercise.id != value)
                {
                    Exercise = null;
                }
                _exerciseBase_id = value;
            }
        }
    }
    private int _exerciseBase_id;

    #endregion
    #region Navigation Properties

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    public virtual ICollection<SetAttribute> SetAttributes
    {
        get
        {
            if (_setAttributes == null)
            {
                var newCollection = new FixupCollection<SetAttribute>();
                newCollection.CollectionChanged += FixupSetAttributes;
                _setAttributes = newCollection;
            }
            return _setAttributes;
        }
        set
        {
            if (!ReferenceEquals(_setAttributes, value))
            {
                var previousValue = _setAttributes as FixupCollection<SetAttribute>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupSetAttributes;
                }
                _setAttributes = value;
                var newValue = value as FixupCollection<SetAttribute>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupSetAttributes;
                }
            }
        }
    }
    private ICollection<SetAttribute> _setAttributes;

    public virtual Exercise Exercise
    {
        get { return _exercise; }
        set
        {
            if (!ReferenceEquals(_exercise, value))
            {
                var previousValue = _exercise;
                _exercise = value;
                FixupExercise(previousValue);
            }
        }
    }
    private Exercise _exercise;

    #endregion
    #region Association Fixup

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.LoggedExercises.Contains(this))
        {
            previousValue.LoggedExercises.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.LoggedExercises.Contains(this))
            {
                LimitBreaker.LoggedExercises.Add(this);
            }
            if (LimitBreaker_id != LimitBreaker.id)
            {
                LimitBreaker_id = LimitBreaker.id;
            }
        }
    }

    private void FixupExercise(Exercise previousValue)
    {
        if (previousValue != null && previousValue.LoggedExercises.Contains(this))
        {
            previousValue.LoggedExercises.Remove(this);
        }

        if (Exercise != null)
        {
            if (!Exercise.LoggedExercises.Contains(this))
            {
                Exercise.LoggedExercises.Add(this);
            }
            if (ExerciseBase_id != Exercise.id)
            {
                ExerciseBase_id = Exercise.id;
            }
        }
    }

    private void FixupSetAttributes(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (SetAttribute item in e.NewItems)
            {
                item.LoggedExercise = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (SetAttribute item in e.OldItems)
            {
                if (ReferenceEquals(item.LoggedExercise, this))
                {
                    item.LoggedExercise = null;
                }
            }
        }
    }

    #endregion
}
public partial class Notification
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual System.DateTime dateCreated
    {
        get;
        set;
    }

    public virtual System.DateTime dateToBeSent
    {
        get;
        set;
    }

    public virtual string message
    {
        get;
        set;
    }

    public virtual int LimitBreaker_id
    {
        get { return _limitBreaker_id; }
        set
        {
            if (_limitBreaker_id != value)
            {
                if (LimitBreaker != null && LimitBreaker.id != value)
                {
                    LimitBreaker = null;
                }
                _limitBreaker_id = value;
            }
        }
    }
    private int _limitBreaker_id;

    #endregion
    #region Navigation Properties

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    #endregion
    #region Association Fixup

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.Notifications.Contains(this))
        {
            previousValue.Notifications.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.Notifications.Contains(this))
            {
                LimitBreaker.Notifications.Add(this);
            }
            if (LimitBreaker_id != LimitBreaker.id)
            {
                LimitBreaker_id = LimitBreaker.id;
            }
        }
    }

    #endregion
}
public partial class Routine
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual System.DateTime last_modified
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual int LimitBreaker_id
    {
        get { return _limitBreaker_id; }
        set
        {
            if (_limitBreaker_id != value)
            {
                if (LimitBreaker != null && LimitBreaker.id != value)
                {
                    LimitBreaker = null;
                }
                _limitBreaker_id = value;
            }
        }
    }
    private int _limitBreaker_id;

    #endregion
    #region Navigation Properties

    public virtual ICollection<Exercise> Exercises
    {
        get
        {
            if (_exercises == null)
            {
                var newCollection = new FixupCollection<Exercise>();
                newCollection.CollectionChanged += FixupExercises;
                _exercises = newCollection;
            }
            return _exercises;
        }
        set
        {
            if (!ReferenceEquals(_exercises, value))
            {
                var previousValue = _exercises as FixupCollection<Exercise>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupExercises;
                }
                _exercises = value;
                var newValue = value as FixupCollection<Exercise>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupExercises;
                }
            }
        }
    }
    private ICollection<Exercise> _exercises;

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    public virtual ICollection<ScheduledRoutine> ScheduledRoutines
    {
        get
        {
            if (_scheduledRoutines == null)
            {
                var newCollection = new FixupCollection<ScheduledRoutine>();
                newCollection.CollectionChanged += FixupScheduledRoutines;
                _scheduledRoutines = newCollection;
            }
            return _scheduledRoutines;
        }
        set
        {
            if (!ReferenceEquals(_scheduledRoutines, value))
            {
                var previousValue = _scheduledRoutines as FixupCollection<ScheduledRoutine>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupScheduledRoutines;
                }
                _scheduledRoutines = value;
                var newValue = value as FixupCollection<ScheduledRoutine>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupScheduledRoutines;
                }
            }
        }
    }
    private ICollection<ScheduledRoutine> _scheduledRoutines;

    #endregion
    #region Association Fixup

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.Routines.Contains(this))
        {
            previousValue.Routines.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.Routines.Contains(this))
            {
                LimitBreaker.Routines.Add(this);
            }
            if (LimitBreaker_id != LimitBreaker.id)
            {
                LimitBreaker_id = LimitBreaker.id;
            }
        }
    }

    private void FixupExercises(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Exercise item in e.NewItems)
            {
                item.Routine = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Exercise item in e.OldItems)
            {
                if (ReferenceEquals(item.Routine, this))
                {
                    item.Routine = null;
                }
            }
        }
    }

    private void FixupScheduledRoutines(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ScheduledRoutine item in e.NewItems)
            {
                item.Routine = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ScheduledRoutine item in e.OldItems)
            {
                if (ReferenceEquals(item.Routine, this))
                {
                    item.Routine = null;
                }
            }
        }
    }

    #endregion
}
public partial class ScheduledExercis
{
    #region Primitive Properties

    public virtual System.DateTime startTime
    {
        get;
        set;
    }

    public virtual bool NeedEmailNotification
    {
        get;
        set;
    }

    public virtual int id
    {
        get;
        set;
    }

    public virtual int ExerciseBase_id
    {
        get { return _exerciseBase_id; }
        set
        {
            if (_exerciseBase_id != value)
            {
                if (Exercise != null && Exercise.id != value)
                {
                    Exercise = null;
                }
                _exerciseBase_id = value;
            }
        }
    }
    private int _exerciseBase_id;

    public virtual int LimitBreakers_id
    {
        get { return _limitBreakers_id; }
        set
        {
            if (_limitBreakers_id != value)
            {
                if (LimitBreaker != null && LimitBreaker.id != value)
                {
                    LimitBreaker = null;
                }
                _limitBreakers_id = value;
            }
        }
    }
    private int _limitBreakers_id;

    #endregion
    #region Navigation Properties

    public virtual Exercise Exercise
    {
        get { return _exercise; }
        set
        {
            if (!ReferenceEquals(_exercise, value))
            {
                var previousValue = _exercise;
                _exercise = value;
                FixupExercise(previousValue);
            }
        }
    }
    private Exercise _exercise;

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    #endregion
    #region Association Fixup

    private void FixupExercise(Exercise previousValue)
    {
        if (previousValue != null && previousValue.ScheduledExercises.Contains(this))
        {
            previousValue.ScheduledExercises.Remove(this);
        }

        if (Exercise != null)
        {
            if (!Exercise.ScheduledExercises.Contains(this))
            {
                Exercise.ScheduledExercises.Add(this);
            }
            if (ExerciseBase_id != Exercise.id)
            {
                ExerciseBase_id = Exercise.id;
            }
        }
    }

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.ScheduledExercises.Contains(this))
        {
            previousValue.ScheduledExercises.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.ScheduledExercises.Contains(this))
            {
                LimitBreaker.ScheduledExercises.Add(this);
            }
            if (LimitBreakers_id != LimitBreaker.id)
            {
                LimitBreakers_id = LimitBreaker.id;
            }
        }
    }

    #endregion
}
public partial class ScheduledRoutine
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual bool NeedEmailNotification
    {
        get;
        set;
    }

    public virtual System.DateTime startTime
    {
        get;
        set;
    }

    public virtual int Routine_id
    {
        get { return _routine_id; }
        set
        {
            if (_routine_id != value)
            {
                if (Routine != null && Routine.id != value)
                {
                    Routine = null;
                }
                _routine_id = value;
            }
        }
    }
    private int _routine_id;

    public virtual int LimitBreaker_id
    {
        get { return _limitBreaker_id; }
        set
        {
            if (_limitBreaker_id != value)
            {
                if (LimitBreaker != null && LimitBreaker.id != value)
                {
                    LimitBreaker = null;
                }
                _limitBreaker_id = value;
            }
        }
    }
    private int _limitBreaker_id;

    #endregion
    #region Navigation Properties

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    public virtual Routine Routine
    {
        get { return _routine; }
        set
        {
            if (!ReferenceEquals(_routine, value))
            {
                var previousValue = _routine;
                _routine = value;
                FixupRoutine(previousValue);
            }
        }
    }
    private Routine _routine;

    #endregion
    #region Association Fixup

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.ScheduledRoutines.Contains(this))
        {
            previousValue.ScheduledRoutines.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.ScheduledRoutines.Contains(this))
            {
                LimitBreaker.ScheduledRoutines.Add(this);
            }
            if (LimitBreaker_id != LimitBreaker.id)
            {
                LimitBreaker_id = LimitBreaker.id;
            }
        }
    }

    private void FixupRoutine(Routine previousValue)
    {
        if (previousValue != null && previousValue.ScheduledRoutines.Contains(this))
        {
            previousValue.ScheduledRoutines.Remove(this);
        }

        if (Routine != null)
        {
            if (!Routine.ScheduledRoutines.Contains(this))
            {
                Routine.ScheduledRoutines.Add(this);
            }
            if (Routine_id != Routine.id)
            {
                Routine_id = Routine.id;
            }
        }
    }

    #endregion
}
public partial class SetAttribute
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual Nullable<int> weight
    {
        get;
        set;
    }

    public virtual Nullable<double> distance
    {
        get;
        set;
    }

    public virtual Nullable<int> time
    {
        get;
        set;
    }

    public virtual Nullable<int> reps
    {
        get;
        set;
    }

    public virtual long LoggedExercise_id
    {
        get { return _loggedExercise_id; }
        set
        {
            if (_loggedExercise_id != value)
            {
                if (LoggedExercise != null && LoggedExercise.id != value)
                {
                    LoggedExercise = null;
                }
                _loggedExercise_id = value;
            }
        }
    }
    private long _loggedExercise_id;

    #endregion
    #region Navigation Properties

    public virtual LoggedExercis LoggedExercise
    {
        get { return _loggedExercise; }
        set
        {
            if (!ReferenceEquals(_loggedExercise, value))
            {
                var previousValue = _loggedExercise;
                _loggedExercise = value;
                FixupLoggedExercise(previousValue);
            }
        }
    }
    private LoggedExercis _loggedExercise;

    #endregion
    #region Association Fixup

    private void FixupLoggedExercise(LoggedExercis previousValue)
    {
        if (previousValue != null && previousValue.SetAttributes.Contains(this))
        {
            previousValue.SetAttributes.Remove(this);
        }

        if (LoggedExercise != null)
        {
            if (!LoggedExercise.SetAttributes.Contains(this))
            {
                LoggedExercise.SetAttributes.Add(this);
            }
            if (LoggedExercise_id != LoggedExercise.id)
            {
                LoggedExercise_id = LoggedExercise.id;
            }
        }
    }

    #endregion
}
public partial class Statistic
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual int level
    {
        get;
        set;
    }

    public virtual double experience
    {
        get;
        set;
    }

    public virtual double weight
    {
        get;
        set;
    }

    public virtual double height
    {
        get;
        set;
    }

    public virtual double rmr
    {
        get;
        set;
    }

    public virtual double bmi
    {
        get;
        set;
    }

    public virtual double vo2MAX
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ICollection<LimitBreaker> LimitBreakers
    {
        get
        {
            if (_limitBreakers == null)
            {
                var newCollection = new FixupCollection<LimitBreaker>();
                newCollection.CollectionChanged += FixupLimitBreakers;
                _limitBreakers = newCollection;
            }
            return _limitBreakers;
        }
        set
        {
            if (!ReferenceEquals(_limitBreakers, value))
            {
                var previousValue = _limitBreakers as FixupCollection<LimitBreaker>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLimitBreakers;
                }
                _limitBreakers = value;
                var newValue = value as FixupCollection<LimitBreaker>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLimitBreakers;
                }
            }
        }
    }
    private ICollection<LimitBreaker> _limitBreakers;

    #endregion
    #region Association Fixup

    private void FixupLimitBreakers(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LimitBreaker item in e.NewItems)
            {
                item.Statistic = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (LimitBreaker item in e.OldItems)
            {
                if (ReferenceEquals(item.Statistic, this))
                {
                    item.Statistic = null;
                }
            }
        }
    }

    #endregion
}
