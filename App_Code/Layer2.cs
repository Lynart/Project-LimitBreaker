//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class FixupCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
public partial class EmailNotification : Notification
{
    #region Primitive Properties

    public virtual string message
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    #endregion
    #region Association Fixup

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.EmailNotifications, this))
        {
            previousValue.EmailNotifications = null;
        }

        if (LimitBreaker != null)
        {
            LimitBreaker.EmailNotifications = this;
        }
    }

    #endregion
}
public partial class Exercise : ExerciseBase
{
    #region Primitive Properties

    public virtual double baseExperiecne
    {
        get;
        set;
    }

    public virtual double weightModifier
    {
        get;
        set;
    }

    public virtual double heightModifier
    {
        get;
        set;
    }

    public virtual double distanceModifier
    {
        get;
        set;
    }

    public virtual double timeModifier
    {
        get;
        set;
    }

    #endregion
}
public partial class ExerciseBase
{
    #region Primitive Properties

    public virtual string name
    {
        get;
        set;
    }

    public virtual string equipment
    {
        get;
        set;
    }

    public virtual string videoLink
    {
        get;
        set;
    }

    public virtual bool rep
    {
        get;
        set;
    }

    public virtual bool weight
    {
        get;
        set;
    }

    public virtual bool distance
    {
        get;
        set;
    }

    public virtual bool time
    {
        get;
        set;
    }

    public virtual bool enabled
    {
        get;
        set;
    }

    public virtual int id
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ScheduledExercise ScheduledExercise
    {
        get { return _scheduledExercise; }
        set
        {
            if (!ReferenceEquals(_scheduledExercise, value))
            {
                var previousValue = _scheduledExercise;
                _scheduledExercise = value;
                FixupScheduledExercise(previousValue);
            }
        }
    }
    private ScheduledExercise _scheduledExercise;

    public virtual ICollection<LoggedExercise> LoggedExercise
    {
        get
        {
            if (_loggedExercise == null)
            {
                var newCollection = new FixupCollection<LoggedExercise>();
                newCollection.CollectionChanged += FixupLoggedExercise;
                _loggedExercise = newCollection;
            }
            return _loggedExercise;
        }
        set
        {
            if (!ReferenceEquals(_loggedExercise, value))
            {
                var previousValue = _loggedExercise as FixupCollection<LoggedExercise>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLoggedExercise;
                }
                _loggedExercise = value;
                var newValue = value as FixupCollection<LoggedExercise>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLoggedExercise;
                }
            }
        }
    }
    private ICollection<LoggedExercise> _loggedExercise;

    public virtual ICollection<MuscleGroup> MuscleGroups
    {
        get
        {
            if (_muscleGroups == null)
            {
                var newCollection = new FixupCollection<MuscleGroup>();
                newCollection.CollectionChanged += FixupMuscleGroups;
                _muscleGroups = newCollection;
            }
            return _muscleGroups;
        }
        set
        {
            if (!ReferenceEquals(_muscleGroups, value))
            {
                var previousValue = _muscleGroups as FixupCollection<MuscleGroup>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupMuscleGroups;
                }
                _muscleGroups = value;
                var newValue = value as FixupCollection<MuscleGroup>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupMuscleGroups;
                }
            }
        }
    }
    private ICollection<MuscleGroup> _muscleGroups;

    #endregion
    #region Association Fixup

    private void FixupScheduledExercise(ScheduledExercise previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.ExerciseBase, this))
        {
            previousValue.ExerciseBase = null;
        }

        if (ScheduledExercise != null)
        {
            ScheduledExercise.ExerciseBase = this;
        }
    }

    private void FixupLoggedExercise(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LoggedExercise item in e.NewItems)
            {
                item.ExerciseBase = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (LoggedExercise item in e.OldItems)
            {
                if (ReferenceEquals(item.ExerciseBase, this))
                {
                    item.ExerciseBase = null;
                }
            }
        }
    }

    private void FixupMuscleGroups(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (MuscleGroup item in e.NewItems)
            {
                item.ExerciseBase = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (MuscleGroup item in e.OldItems)
            {
                if (ReferenceEquals(item.ExerciseBase, this))
                {
                    item.ExerciseBase = null;
                }
            }
        }
    }

    #endregion
}
public partial class ExerciseGoal
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual SetAttributes SetAttribute
    {
        get { return _setAttribute; }
        set
        {
            if (!ReferenceEquals(_setAttribute, value))
            {
                var previousValue = _setAttribute;
                _setAttribute = value;
                FixupSetAttribute(previousValue);
            }
        }
    }
    private SetAttributes _setAttribute;

    public virtual Routine Routine
    {
        get { return _routine; }
        set
        {
            if (!ReferenceEquals(_routine, value))
            {
                var previousValue = _routine;
                _routine = value;
                FixupRoutine(previousValue);
            }
        }
    }
    private Routine _routine;

    #endregion
    #region Association Fixup

    private void FixupSetAttribute(SetAttributes previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.ExerciseGoal, this))
        {
            previousValue.ExerciseGoal = null;
        }

        if (SetAttribute != null)
        {
            SetAttribute.ExerciseGoal = this;
        }
    }

    private void FixupRoutine(Routine previousValue)
    {
        if (previousValue != null && previousValue.ExerciseGoals.Contains(this))
        {
            previousValue.ExerciseGoals.Remove(this);
        }

        if (Routine != null)
        {
            if (!Routine.ExerciseGoals.Contains(this))
            {
                Routine.ExerciseGoals.Add(this);
            }
        }
    }

    #endregion
}
public partial class ExperienceAtrophy
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual int graceDays
    {
        get;
        set;
    }

    public virtual double baseLoss
    {
        get;
        set;
    }

    #endregion
}
public partial class LevelFormula
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual int maxLevel
    {
        get;
        set;
    }

    public virtual double expModifier
    {
        get;
        set;
    }

    public virtual double baseRequired
    {
        get;
        set;
    }

    #endregion
}
public partial class LimitBreaker
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual string username
    {
        get;
        set;
    }

    public virtual string gender
    {
        get;
        set;
    }

    public virtual System.DateTime dateOfBirth
    {
        get;
        set;
    }

    public virtual bool verified
    {
        get;
        set;
    }

    public virtual bool deactivated
    {
        get;
        set;
    }

    public virtual string role
    {
        get;
        set;
    }

    public virtual string status
    {
        get;
        set;
    }

    public virtual System.DateTime lastTimeSuggestionMade
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ICollection<ScheduledExercise> ScheduledExercise
    {
        get
        {
            if (_scheduledExercise == null)
            {
                var newCollection = new FixupCollection<ScheduledExercise>();
                newCollection.CollectionChanged += FixupScheduledExercise;
                _scheduledExercise = newCollection;
            }
            return _scheduledExercise;
        }
        set
        {
            if (!ReferenceEquals(_scheduledExercise, value))
            {
                var previousValue = _scheduledExercise as FixupCollection<ScheduledExercise>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupScheduledExercise;
                }
                _scheduledExercise = value;
                var newValue = value as FixupCollection<ScheduledExercise>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupScheduledExercise;
                }
            }
        }
    }
    private ICollection<ScheduledExercise> _scheduledExercise;

    public virtual EmailNotification EmailNotifications
    {
        get { return _emailNotifications; }
        set
        {
            if (!ReferenceEquals(_emailNotifications, value))
            {
                var previousValue = _emailNotifications;
                _emailNotifications = value;
                FixupEmailNotifications(previousValue);
            }
        }
    }
    private EmailNotification _emailNotifications;

    public virtual Statistics Statistics
    {
        get { return _statistics; }
        set
        {
            if (!ReferenceEquals(_statistics, value))
            {
                var previousValue = _statistics;
                _statistics = value;
                FixupStatistics(previousValue);
            }
        }
    }
    private Statistics _statistics;

    public virtual ICollection<Suggestion> Suggestion
    {
        get
        {
            if (_suggestion == null)
            {
                var newCollection = new FixupCollection<Suggestion>();
                newCollection.CollectionChanged += FixupSuggestion;
                _suggestion = newCollection;
            }
            return _suggestion;
        }
        set
        {
            if (!ReferenceEquals(_suggestion, value))
            {
                var previousValue = _suggestion as FixupCollection<Suggestion>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupSuggestion;
                }
                _suggestion = value;
                var newValue = value as FixupCollection<Suggestion>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupSuggestion;
                }
            }
        }
    }
    private ICollection<Suggestion> _suggestion;

    public virtual ICollection<Routine> Routines
    {
        get
        {
            if (_routines == null)
            {
                var newCollection = new FixupCollection<Routine>();
                newCollection.CollectionChanged += FixupRoutines;
                _routines = newCollection;
            }
            return _routines;
        }
        set
        {
            if (!ReferenceEquals(_routines, value))
            {
                var previousValue = _routines as FixupCollection<Routine>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupRoutines;
                }
                _routines = value;
                var newValue = value as FixupCollection<Routine>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupRoutines;
                }
            }
        }
    }
    private ICollection<Routine> _routines;

    public virtual ICollection<ScheduledRoutine> ScheduledRoutines
    {
        get
        {
            if (_scheduledRoutines == null)
            {
                var newCollection = new FixupCollection<ScheduledRoutine>();
                newCollection.CollectionChanged += FixupScheduledRoutines;
                _scheduledRoutines = newCollection;
            }
            return _scheduledRoutines;
        }
        set
        {
            if (!ReferenceEquals(_scheduledRoutines, value))
            {
                var previousValue = _scheduledRoutines as FixupCollection<ScheduledRoutine>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupScheduledRoutines;
                }
                _scheduledRoutines = value;
                var newValue = value as FixupCollection<ScheduledRoutine>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupScheduledRoutines;
                }
            }
        }
    }
    private ICollection<ScheduledRoutine> _scheduledRoutines;

    public virtual ICollection<LoggedExercise> LoggedExercises
    {
        get
        {
            if (_loggedExercises == null)
            {
                var newCollection = new FixupCollection<LoggedExercise>();
                newCollection.CollectionChanged += FixupLoggedExercises;
                _loggedExercises = newCollection;
            }
            return _loggedExercises;
        }
        set
        {
            if (!ReferenceEquals(_loggedExercises, value))
            {
                var previousValue = _loggedExercises as FixupCollection<LoggedExercise>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLoggedExercises;
                }
                _loggedExercises = value;
                var newValue = value as FixupCollection<LoggedExercise>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLoggedExercises;
                }
            }
        }
    }
    private ICollection<LoggedExercise> _loggedExercises;

    #endregion
    #region Association Fixup

    private void FixupEmailNotifications(EmailNotification previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.LimitBreaker, this))
        {
            previousValue.LimitBreaker = null;
        }

        if (EmailNotifications != null)
        {
            EmailNotifications.LimitBreaker = this;
        }
    }

    private void FixupStatistics(Statistics previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.LimitBreaker, this))
        {
            previousValue.LimitBreaker = null;
        }

        if (Statistics != null)
        {
            Statistics.LimitBreaker = this;
        }
    }

    private void FixupScheduledExercise(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ScheduledExercise item in e.NewItems)
            {
                item.LimitBreakers = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ScheduledExercise item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreakers, this))
                {
                    item.LimitBreakers = null;
                }
            }
        }
    }

    private void FixupSuggestion(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Suggestion item in e.NewItems)
            {
                item.LimitBreakers = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Suggestion item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreakers, this))
                {
                    item.LimitBreakers = null;
                }
            }
        }
    }

    private void FixupRoutines(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Routine item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Routine item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    private void FixupScheduledRoutines(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ScheduledRoutine item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ScheduledRoutine item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    private void FixupLoggedExercises(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LoggedExercise item in e.NewItems)
            {
                item.LimitBreaker = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (LoggedExercise item in e.OldItems)
            {
                if (ReferenceEquals(item.LimitBreaker, this))
                {
                    item.LimitBreaker = null;
                }
            }
        }
    }

    #endregion
}
public partial class LoggedExercise
{
    #region Primitive Properties

    public virtual short sets
    {
        get;
        set;
    }

    public virtual System.DateTime timeLogged
    {
        get;
        set;
    }

    public virtual string note
    {
        get;
        set;
    }

    public virtual long id
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual SetAttributes SetAttribute
    {
        get { return _setAttribute; }
        set
        {
            if (!ReferenceEquals(_setAttribute, value))
            {
                var previousValue = _setAttribute;
                _setAttribute = value;
                FixupSetAttribute(previousValue);
            }
        }
    }
    private SetAttributes _setAttribute;

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    public virtual Routine Routine
    {
        get { return _routine; }
        set
        {
            if (!ReferenceEquals(_routine, value))
            {
                var previousValue = _routine;
                _routine = value;
                FixupRoutine(previousValue);
            }
        }
    }
    private Routine _routine;

    public virtual ExerciseBase ExerciseBase
    {
        get { return _exerciseBase; }
        set
        {
            if (!ReferenceEquals(_exerciseBase, value))
            {
                var previousValue = _exerciseBase;
                _exerciseBase = value;
                FixupExerciseBase(previousValue);
            }
        }
    }
    private ExerciseBase _exerciseBase;

    #endregion
    #region Association Fixup

    private void FixupSetAttribute(SetAttributes previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.LoggedExercise, this))
        {
            previousValue.LoggedExercise = null;
        }

        if (SetAttribute != null)
        {
            SetAttribute.LoggedExercise = this;
        }
    }

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.LoggedExercises.Contains(this))
        {
            previousValue.LoggedExercises.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.LoggedExercises.Contains(this))
            {
                LimitBreaker.LoggedExercises.Add(this);
            }
        }
    }

    private void FixupRoutine(Routine previousValue)
    {
        if (previousValue != null && previousValue.LoggedExercises.Contains(this))
        {
            previousValue.LoggedExercises.Remove(this);
        }

        if (Routine != null)
        {
            if (!Routine.LoggedExercises.Contains(this))
            {
                Routine.LoggedExercises.Add(this);
            }
        }
    }

    private void FixupExerciseBase(ExerciseBase previousValue)
    {
        if (previousValue != null && previousValue.LoggedExercise.Contains(this))
        {
            previousValue.LoggedExercise.Remove(this);
        }

        if (ExerciseBase != null)
        {
            if (!ExerciseBase.LoggedExercise.Contains(this))
            {
                ExerciseBase.LoggedExercise.Add(this);
            }
        }
    }

    #endregion
}
public partial class MuscleGroup
{
    #region Primitive Properties

    public virtual short id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ExerciseBase ExerciseBase
    {
        get { return _exerciseBase; }
        set
        {
            if (!ReferenceEquals(_exerciseBase, value))
            {
                var previousValue = _exerciseBase;
                _exerciseBase = value;
                FixupExerciseBase(previousValue);
            }
        }
    }
    private ExerciseBase _exerciseBase;

    public virtual SuggestedExercise SuggestedExercise
    {
        get { return _suggestedExercise; }
        set
        {
            if (!ReferenceEquals(_suggestedExercise, value))
            {
                var previousValue = _suggestedExercise;
                _suggestedExercise = value;
                FixupSuggestedExercise(previousValue);
            }
        }
    }
    private SuggestedExercise _suggestedExercise;

    #endregion
    #region Association Fixup

    private void FixupExerciseBase(ExerciseBase previousValue)
    {
        if (previousValue != null && previousValue.MuscleGroups.Contains(this))
        {
            previousValue.MuscleGroups.Remove(this);
        }

        if (ExerciseBase != null)
        {
            if (!ExerciseBase.MuscleGroups.Contains(this))
            {
                ExerciseBase.MuscleGroups.Add(this);
            }
        }
    }

    private void FixupSuggestedExercise(SuggestedExercise previousValue)
    {
        if (previousValue != null && previousValue.MuscleGroups.Contains(this))
        {
            previousValue.MuscleGroups.Remove(this);
        }

        if (SuggestedExercise != null)
        {
            if (!SuggestedExercise.MuscleGroups.Contains(this))
            {
                SuggestedExercise.MuscleGroups.Add(this);
            }
        }
    }

    #endregion
}
public partial class Notification
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual System.DateTime dateCreated
    {
        get;
        set;
    }

    public virtual System.DateTime dateToBeSent
    {
        get;
        set;
    }

    public virtual string userEmail
    {
        get;
        set;
    }

    #endregion
}
public partial class Routine
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual System.DateTime last_modified
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ICollection<ExerciseGoal> ExerciseGoals
    {
        get
        {
            if (_exerciseGoals == null)
            {
                var newCollection = new FixupCollection<ExerciseGoal>();
                newCollection.CollectionChanged += FixupExerciseGoals;
                _exerciseGoals = newCollection;
            }
            return _exerciseGoals;
        }
        set
        {
            if (!ReferenceEquals(_exerciseGoals, value))
            {
                var previousValue = _exerciseGoals as FixupCollection<ExerciseGoal>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupExerciseGoals;
                }
                _exerciseGoals = value;
                var newValue = value as FixupCollection<ExerciseGoal>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupExerciseGoals;
                }
            }
        }
    }
    private ICollection<ExerciseGoal> _exerciseGoals;

    public virtual ScheduledRoutine ScheduledRoutine
    {
        get { return _scheduledRoutine; }
        set
        {
            if (!ReferenceEquals(_scheduledRoutine, value))
            {
                var previousValue = _scheduledRoutine;
                _scheduledRoutine = value;
                FixupScheduledRoutine(previousValue);
            }
        }
    }
    private ScheduledRoutine _scheduledRoutine;

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    public virtual ICollection<LoggedExercise> LoggedExercises
    {
        get
        {
            if (_loggedExercises == null)
            {
                var newCollection = new FixupCollection<LoggedExercise>();
                newCollection.CollectionChanged += FixupLoggedExercises;
                _loggedExercises = newCollection;
            }
            return _loggedExercises;
        }
        set
        {
            if (!ReferenceEquals(_loggedExercises, value))
            {
                var previousValue = _loggedExercises as FixupCollection<LoggedExercise>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupLoggedExercises;
                }
                _loggedExercises = value;
                var newValue = value as FixupCollection<LoggedExercise>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupLoggedExercises;
                }
            }
        }
    }
    private ICollection<LoggedExercise> _loggedExercises;

    #endregion
    #region Association Fixup

    private void FixupScheduledRoutine(ScheduledRoutine previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.Routine, this))
        {
            previousValue.Routine = null;
        }

        if (ScheduledRoutine != null)
        {
            ScheduledRoutine.Routine = this;
        }
    }

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.Routines.Contains(this))
        {
            previousValue.Routines.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.Routines.Contains(this))
            {
                LimitBreaker.Routines.Add(this);
            }
        }
    }

    private void FixupExerciseGoals(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (ExerciseGoal item in e.NewItems)
            {
                item.Routine = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (ExerciseGoal item in e.OldItems)
            {
                if (ReferenceEquals(item.Routine, this))
                {
                    item.Routine = null;
                }
            }
        }
    }

    private void FixupLoggedExercises(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (LoggedExercise item in e.NewItems)
            {
                item.Routine = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (LoggedExercise item in e.OldItems)
            {
                if (ReferenceEquals(item.Routine, this))
                {
                    item.Routine = null;
                }
            }
        }
    }

    #endregion
}
public partial class ScheduledExercise
{
    #region Primitive Properties

    public virtual System.DateTime startTime
    {
        get;
        set;
    }

    public virtual bool NeedEmailNotification
    {
        get;
        set;
    }

    public virtual int id
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ExerciseBase ExerciseBase
    {
        get { return _exerciseBase; }
        set
        {
            if (!ReferenceEquals(_exerciseBase, value))
            {
                var previousValue = _exerciseBase;
                _exerciseBase = value;
                FixupExerciseBase(previousValue);
            }
        }
    }
    private ExerciseBase _exerciseBase;

    public virtual ScheduledReminder ScheduledReminders
    {
        get { return _scheduledReminders; }
        set
        {
            if (!ReferenceEquals(_scheduledReminders, value))
            {
                var previousValue = _scheduledReminders;
                _scheduledReminders = value;
                FixupScheduledReminders(previousValue);
            }
        }
    }
    private ScheduledReminder _scheduledReminders;

    public virtual LimitBreaker LimitBreakers
    {
        get { return _limitBreakers; }
        set
        {
            if (!ReferenceEquals(_limitBreakers, value))
            {
                var previousValue = _limitBreakers;
                _limitBreakers = value;
                FixupLimitBreakers(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreakers;

    #endregion
    #region Association Fixup

    private void FixupExerciseBase(ExerciseBase previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.ScheduledExercise, this))
        {
            previousValue.ScheduledExercise = null;
        }

        if (ExerciseBase != null)
        {
            ExerciseBase.ScheduledExercise = this;
        }
    }

    private void FixupScheduledReminders(ScheduledReminder previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.ScheduledExercise, this))
        {
            previousValue.ScheduledExercise = null;
        }

        if (ScheduledReminders != null)
        {
            ScheduledReminders.ScheduledExercise = this;
        }
    }

    private void FixupLimitBreakers(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.ScheduledExercise.Contains(this))
        {
            previousValue.ScheduledExercise.Remove(this);
        }

        if (LimitBreakers != null)
        {
            if (!LimitBreakers.ScheduledExercise.Contains(this))
            {
                LimitBreakers.ScheduledExercise.Add(this);
            }
        }
    }

    #endregion
}
public partial class ScheduledReminder : Notification
{
    #region Primitive Properties

    public virtual string message
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ScheduledExercise ScheduledExercise
    {
        get { return _scheduledExercise; }
        set
        {
            if (!ReferenceEquals(_scheduledExercise, value))
            {
                var previousValue = _scheduledExercise;
                _scheduledExercise = value;
                FixupScheduledExercise(previousValue);
            }
        }
    }
    private ScheduledExercise _scheduledExercise;

    public virtual ScheduledRoutine ScheduledRoutine
    {
        get { return _scheduledRoutine; }
        set
        {
            if (!ReferenceEquals(_scheduledRoutine, value))
            {
                var previousValue = _scheduledRoutine;
                _scheduledRoutine = value;
                FixupScheduledRoutine(previousValue);
            }
        }
    }
    private ScheduledRoutine _scheduledRoutine;

    #endregion
    #region Association Fixup

    private void FixupScheduledExercise(ScheduledExercise previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.ScheduledReminders, this))
        {
            previousValue.ScheduledReminders = null;
        }

        if (ScheduledExercise != null)
        {
            ScheduledExercise.ScheduledReminders = this;
        }
    }

    private void FixupScheduledRoutine(ScheduledRoutine previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.ScheduledReminders, this))
        {
            previousValue.ScheduledReminders = null;
        }

        if (ScheduledRoutine != null)
        {
            ScheduledRoutine.ScheduledReminders = this;
        }
    }

    #endregion
}
public partial class ScheduledRoutine
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual bool NeedEmailNotification
    {
        get;
        set;
    }

    public virtual System.DateTime startTime
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Routine Routine
    {
        get { return _routine; }
        set
        {
            if (!ReferenceEquals(_routine, value))
            {
                var previousValue = _routine;
                _routine = value;
                FixupRoutine(previousValue);
            }
        }
    }
    private Routine _routine;

    public virtual ScheduledReminder ScheduledReminders
    {
        get { return _scheduledReminders; }
        set
        {
            if (!ReferenceEquals(_scheduledReminders, value))
            {
                var previousValue = _scheduledReminders;
                _scheduledReminders = value;
                FixupScheduledReminders(previousValue);
            }
        }
    }
    private ScheduledReminder _scheduledReminders;

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    #endregion
    #region Association Fixup

    private void FixupRoutine(Routine previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.ScheduledRoutine, this))
        {
            previousValue.ScheduledRoutine = null;
        }

        if (Routine != null)
        {
            Routine.ScheduledRoutine = this;
        }
    }

    private void FixupScheduledReminders(ScheduledReminder previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.ScheduledRoutine, this))
        {
            previousValue.ScheduledRoutine = null;
        }

        if (ScheduledReminders != null)
        {
            ScheduledReminders.ScheduledRoutine = this;
        }
    }

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.ScheduledRoutines.Contains(this))
        {
            previousValue.ScheduledRoutines.Remove(this);
        }

        if (LimitBreaker != null)
        {
            if (!LimitBreaker.ScheduledRoutines.Contains(this))
            {
                LimitBreaker.ScheduledRoutines.Add(this);
            }
        }
    }

    #endregion
}
public partial class SetAttributes
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual Nullable<double> weight
    {
        get;
        set;
    }

    public virtual Nullable<double> distance
    {
        get;
        set;
    }

    public virtual Nullable<long> time
    {
        get;
        set;
    }

    public virtual Nullable<short> reps
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual LoggedExercise LoggedExercise
    {
        get { return _loggedExercise; }
        set
        {
            if (!ReferenceEquals(_loggedExercise, value))
            {
                var previousValue = _loggedExercise;
                _loggedExercise = value;
                FixupLoggedExercise(previousValue);
            }
        }
    }
    private LoggedExercise _loggedExercise;

    public virtual ExerciseGoal ExerciseGoal
    {
        get { return _exerciseGoal; }
        set
        {
            if (!ReferenceEquals(_exerciseGoal, value))
            {
                var previousValue = _exerciseGoal;
                _exerciseGoal = value;
                FixupExerciseGoal(previousValue);
            }
        }
    }
    private ExerciseGoal _exerciseGoal;

    #endregion
    #region Association Fixup

    private void FixupLoggedExercise(LoggedExercise previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.SetAttribute, this))
        {
            previousValue.SetAttribute = null;
        }

        if (LoggedExercise != null)
        {
            LoggedExercise.SetAttribute = this;
        }
    }

    private void FixupExerciseGoal(ExerciseGoal previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.SetAttribute, this))
        {
            previousValue.SetAttribute = null;
        }

        if (ExerciseGoal != null)
        {
            ExerciseGoal.SetAttribute = this;
        }
    }

    #endregion
}
public partial class Statistics
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual int level
    {
        get;
        set;
    }

    public virtual double experience
    {
        get;
        set;
    }

    public virtual double weight
    {
        get;
        set;
    }

    public virtual double height
    {
        get;
        set;
    }

    public virtual double rmr
    {
        get;
        set;
    }

    public virtual double bmr
    {
        get;
        set;
    }

    public virtual double vo2MAX
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual LimitBreaker LimitBreaker
    {
        get { return _limitBreaker; }
        set
        {
            if (!ReferenceEquals(_limitBreaker, value))
            {
                var previousValue = _limitBreaker;
                _limitBreaker = value;
                FixupLimitBreaker(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreaker;

    #endregion
    #region Association Fixup

    private void FixupLimitBreaker(LimitBreaker previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.Statistics, this))
        {
            previousValue.Statistics = null;
        }

        if (LimitBreaker != null)
        {
            LimitBreaker.Statistics = this;
        }
    }

    #endregion
}
public partial class SuggestedExercise
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual string name
    {
        get;
        set;
    }

    public virtual string equipment
    {
        get;
        set;
    }

    public virtual string videoLink
    {
        get;
        set;
    }

    public virtual bool rep
    {
        get;
        set;
    }

    public virtual bool wieght
    {
        get;
        set;
    }

    public virtual bool distance
    {
        get;
        set;
    }

    public virtual bool time
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Suggestion Suggestion
    {
        get { return _suggestion; }
        set
        {
            if (!ReferenceEquals(_suggestion, value))
            {
                var previousValue = _suggestion;
                _suggestion = value;
                FixupSuggestion(previousValue);
            }
        }
    }
    private Suggestion _suggestion;

    public virtual ICollection<MuscleGroup> MuscleGroups
    {
        get
        {
            if (_muscleGroups == null)
            {
                var newCollection = new FixupCollection<MuscleGroup>();
                newCollection.CollectionChanged += FixupMuscleGroups;
                _muscleGroups = newCollection;
            }
            return _muscleGroups;
        }
        set
        {
            if (!ReferenceEquals(_muscleGroups, value))
            {
                var previousValue = _muscleGroups as FixupCollection<MuscleGroup>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupMuscleGroups;
                }
                _muscleGroups = value;
                var newValue = value as FixupCollection<MuscleGroup>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupMuscleGroups;
                }
            }
        }
    }
    private ICollection<MuscleGroup> _muscleGroups;

    #endregion
    #region Association Fixup

    private void FixupSuggestion(Suggestion previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.SuggestedExercises, this))
        {
            previousValue.SuggestedExercises = null;
        }

        if (Suggestion != null)
        {
            Suggestion.SuggestedExercises = this;
        }
    }

    private void FixupMuscleGroups(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (MuscleGroup item in e.NewItems)
            {
                item.SuggestedExercise = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (MuscleGroup item in e.OldItems)
            {
                if (ReferenceEquals(item.SuggestedExercise, this))
                {
                    item.SuggestedExercise = null;
                }
            }
        }
    }

    #endregion
}
public partial class Suggestion
{
    #region Primitive Properties

    public virtual int id
    {
        get;
        set;
    }

    public virtual string reason
    {
        get;
        set;
    }

    public virtual string status
    {
        get;
        set;
    }

    public virtual System.DateTime expiryDate
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual SuggestedExercise SuggestedExercises
    {
        get { return _suggestedExercises; }
        set
        {
            if (!ReferenceEquals(_suggestedExercises, value))
            {
                var previousValue = _suggestedExercises;
                _suggestedExercises = value;
                FixupSuggestedExercises(previousValue);
            }
        }
    }
    private SuggestedExercise _suggestedExercises;

    public virtual LimitBreaker LimitBreakers
    {
        get { return _limitBreakers; }
        set
        {
            if (!ReferenceEquals(_limitBreakers, value))
            {
                var previousValue = _limitBreakers;
                _limitBreakers = value;
                FixupLimitBreakers(previousValue);
            }
        }
    }
    private LimitBreaker _limitBreakers;

    #endregion
    #region Association Fixup

    private void FixupSuggestedExercises(SuggestedExercise previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.Suggestion, this))
        {
            previousValue.Suggestion = null;
        }

        if (SuggestedExercises != null)
        {
            SuggestedExercises.Suggestion = this;
        }
    }

    private void FixupLimitBreakers(LimitBreaker previousValue)
    {
        if (previousValue != null && previousValue.Suggestion.Contains(this))
        {
            previousValue.Suggestion.Remove(this);
        }

        if (LimitBreakers != null)
        {
            if (!LimitBreakers.Suggestion.Contains(this))
            {
                LimitBreakers.Suggestion.Add(this);
            }
        }
    }

    #endregion
}
